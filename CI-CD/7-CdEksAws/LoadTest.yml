name: Load Test

on:
  workflow_call:

jobs:

  loadtest:
    runs-on: 'ubuntu-latest'
    steps:
    - uses: actions/checkout@v3

    - name: Configurando credenciais da AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - run: git clone [nome do repositÃ³rio da infra]

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
    
    - run: terraform -chdir=[Caminho da pasta env, do codigo de infra] init

    - run: terraform -chdir=[Caminho da pasta env, do codigo de infra] destroy -auto-approve

    - run: terraform -chdir=[Caminho da pasta env, do codigo de infra] apply -auto-approve

    - run: echo "$(terraform -chdir=[Caminho da pasta env, do codigo de infra] output -raw IP_alb)"
      id: URL

    - name: Setup Python
      uses: actions/setup-python@v5.0.0
      with:
       python-version: "3.10"
    
    - uses: BSFishy/pip-action@v1
      with:
       packages: |
        locust

    - run: | 
        echo "from locust import HttpUser, TaskSet, task, between" >> locustfile.py
        echo "class UserTasks(TaskSet):" >> locustfile.py
        echo "  @task(1)" >> locustfile.py
        echo "  def index(self):" >> locustfile.py
        echo '    self.client.get("/[canal da api]")' >> locustfile.py
        echo "" >> locustfile.py
        echo "class WebsiteUser(HttpUser):" >> locustfile.py
        echo "  tasks = [UserTasks]" >> locustfile.py
        echo "  wait_time = between(1, 5)" >> locustfile.py

    - name: Roda teste de carga
      run: sleep 60 ; locust -f locustfile.py --headless -u 10 -r 5 --run-time 60s -H http://${{ steps.URL.outputs.stdout }}

    - run: terraform -chdir=[Caminho da pasta env, do codigo de infra] destroy -auto-approve
