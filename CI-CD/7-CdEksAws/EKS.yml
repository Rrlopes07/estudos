name: kubernetes

on:
  workflow_call:

jobs:

  EKS:
    runs-on: 'ubuntu-latest'
    steps:
    - uses: actions/checkout@v3

    - name: Configurando credenciais da AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    # obtém arquivos da infra e monta ela na aws
    - run: git clone <repositorio da infra do kubernetes>

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
    
    - run: terraform -chdir=<Caminho da pasta env> init

    - run: terraform -chdir=<Caminho da pasta env> apply -auto-approve

    - run: echo "$(terraform -chdir=<Caminho da pasta env> output -raw <nome do output do ip do banco de dados>)"
      id: URL

    # adiciona kubectl e configura o acesso ao cluster do kubernetes
    - uses: azure/setup-kubectl@v3

    - run: aws sts get-caller-identity

    - run: aws eks update-kubeconfig --region us-east-2 --name <nome do cluster>

    - run: kubectl get svc

    # gerenciamento das variáveis de ambiente
    - run: kubectl delete secret dbhost --ignore-not-found
    - run: kubectl delete secret dbport --ignore-not-found
    - run: kubectl delete secret dbuser --ignore-not-found
    - run: kubectl delete secret dbpassword --ignore-not-found
    - run: kubectl delete secret dbname --ignore-not-found
    - run: kubectl delete secret port --ignore-not-found

    - run: kubectl create secret generic dbhost --from-literal=HOST=${{ steps.URL.outputs.stdout }}
    - run: kubectl create secret generic dbport --from-literal=DBPORT=${{ secrets.DBPORT }}
    - run: kubectl create secret generic dbuser --from-literal=USER=${{ secrets.DBUSER }}
    - run: kubectl create secret generic dbpassword --from-literal=PASSWORD=${{ secrets.DBPASSWORD }}
    - run: kubectl create secret generic dbname --from-literal=DBNAME=${{ secrets.DBNAME }}
    - run: kubectl create secret generic port --from-literal=PORT=8000

    # faz o deploy do arquivo .yaml, contido na pasta de infra
    - run: kubectl apply -f ./<pasta do arquivo>/main.yaml

    # atualiza o container para a imagem mais recente
    - run: kubectl set image deployment/go_api <nome da imagem>=<nome da imagem>:<versao da imagem>